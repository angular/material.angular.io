# Note: YAML anchors allow an object to be re-used, reducing duplication.
# The ampersand declares an alias for an object, then later the `<<: *name`
# syntax dereferences it.
# See https://blog.daemonl.com/2016/02/yaml.html
# To validate changes, use an online parser, eg.
# https://yaml-online-parser.appspot.com/

# CircleCI configuration version
# Version 2.1 allows for extra config reuse features
# https://circleci.com/docs/2.0/reusing-config/#getting-started-with-config-reuse
version: 2.1

# Cache key for CircleCI. We want to invalidate the cache whenever the Yarn lock file changes.
var_1: &cache_key material-angular-io-{{ .Branch }}-{{ checksum "yarn.lock" }}
var_2: &default_docker_image circleci/node:16.10.0-browsers

# Settings common to each job
var_3: &job_defaults
  working_directory: ~/material-angular-io
  docker:
    - image: *default_docker_image

var_4: &save_cache
  save_cache:
    key: *cache_key
    paths:
    - "node_modules"

var_5: &yarn_install
  run:
    name: "Installing project dependencies"
    command: yarn install --frozen-lockfile --non-interactive

# https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs
# https://circleci.com/blog/deep-diving-into-circleci-workspaces/
var_6: &workspace_location ~/

orbs:
  build-tools: circleci/build-tools@2.9.0

commands:
  store_build_output:
    description: 'Stores build artifacts'
    steps:
      - run:
          name: Move compiled apps to workspace
          command: |
            set -exu
            mkdir -p ~/dist
            mv dist/* ~/dist/
      - persist_to_workspace:
          root: *workspace_location
          paths:
            - dist
  # Command for checking out the source code from GitHub. This also ensures that the source code
  # can be merged to the master branch without conflicts.
  checkout_and_rebase:
    description: Checkout and verify clean merge with master
    steps:
      - checkout
      - run:
          name: Set git user.name and user.email for rebase.
          # User is required for rebase.
          command: |
            git config user.name "angular-ci"
            git config user.email "angular-ci"
      - build-tools/merge-with-parent:
          parent: master

jobs:
  lint:
    <<: *job_defaults
    steps:
    - checkout_and_rebase
    - restore_cache:
        key: *cache_key
    - *yarn_install
    - run: yarn lint
    - *save_cache

  build:
    <<: *job_defaults
    # We generate a lot of chunks with our build. To improve stability and to reduce
    # the amount it takes to run, we use a higher resource class with better VM specs.
    # https://circleci.com/docs/2.0/configuration-reference/#resource_class
    resource_class: large
    steps:
    - checkout_and_rebase
    - restore_cache:
        key: *cache_key
    - *yarn_install
    - run: yarn prod-build
    - *save_cache
    - store_build_output

  test:
    <<: *job_defaults
    steps:
    - checkout_and_rebase
    - restore_cache:
        key: *cache_key
    - *yarn_install
    - run: yarn test --watch false --progress=false

  audit_pages_for_a11y:
    <<: *job_defaults
    steps:
      - attach_workspace:
          at: *workspace_location
      - checkout_and_rebase
      - restore_cache:
          key: *cache_key
      - *yarn_install
      - run: yarn test:audit:a11y:ci

  lighthouse_audits:
    <<: *job_defaults
    steps:
      - attach_workspace:
          at: *workspace_location
      - checkout_and_rebase
      - restore_cache:
          key: *cache_key
      - *yarn_install
      - run: yarn test:audit:ci

workflows:
  version: 2
  default_workflow:
    jobs:
    - lint
    - build
    - test
    - audit_pages_for_a11y:
        requires:
          - build
    - lighthouse_audits:
        requires:
          - build
